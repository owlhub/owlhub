// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid())
  name                   String?
  email                  String                  @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  accounts               Account[]
  sessions               Session[]
  userRoles              UserRole[]
  integrationMemberships IntegrationMembership[]
  isSuperUser            Boolean                 @default(false)
  isActive               Boolean                 @default(true)

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]
  pageRoles   PageRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Page {
  id          String     @id @default(uuid())
  path        String     @unique
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  pageRoles   PageRole[]

  @@map("pages")
}

model PageRole {
  id        String   @id @default(uuid())
  pageId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([pageId, roleId])
  @@map("page_roles")
}

model App {
  id                     String                  @id @default(uuid())
  name                   String                  @unique
  type                   String
  description            String?
  icon                   String?
  configFields           String // JSON string of required config fields
  guide                  String? // Path to the guide markdown file
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  integrations           Integration[]
  appFindings            AppFinding[]
  actions                Action[]
  integrationMemberships IntegrationMembership[]

  @@map("apps")
}

model AppFinding {
  id                        String                     @id @default(uuid())
  key                       String                     @unique
  name                      String
  severity                  String // 'low', 'medium', 'high', 'critical'
  description               String
  type                      String // 'posture', etc.
  appId                     String
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  app                       App                        @relation(fields: [appId], references: [id])
  integrationFindings       IntegrationFinding[]
  integrationFindingDetails IntegrationFindingDetail[]

  @@map("app_findings")
}

model Action {
  id          String   @id @default(uuid())
  name        String
  description String
  appId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  app         App      @relation(fields: [appId], references: [id])

  @@map("action")
}

model Integration {
  id                        String                     @id @default(uuid())
  name                      String // User-defined name for this integration
  appId                     String
  config                    String // JSON string of configuration values
  isEnabled                 Boolean                    @default(true)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  app                       App                        @relation(fields: [appId], references: [id])
  integrationMemberships    IntegrationMembership[]
  integrationFindings       IntegrationFinding[]
  integrationFindingDetails IntegrationFindingDetail[]

  @@map("integrations")
}

model IntegrationMembership {
  id             String      @id @default(uuid())
  integrationId  String
  appId          String
  userId         String
  additionalInfo String? // JSON string for additional info if required
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  integration    Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  app            App         @relation(fields: [appId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([integrationId, userId], name: "integrationId_userId")
  @@map("integration_memberships")
}

model IntegrationFinding {
  id             String      @id @default(uuid())
  integrationId  String
  appFindingId   String
  activeCount    Int         @default(0)
  hiddenCount    Int         @default(0)
  severity       String // 'low', 'medium', 'high', 'critical'
  lastDetectedAt DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  integration    Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  appFinding     AppFinding  @relation(fields: [appFindingId], references: [id], onDelete: Cascade)

  @@unique([integrationId, appFindingId], name: "integrationId_appFindingId")
  @@map("integration_findings")
}

model IntegrationFindingDetail {
  id             String      @id @default(uuid())
  integrationId  String
  appFindingId   String
  key            String      @unique
  description    String
  hidden         Boolean     @default(false)
  additionalInfo String // JSON data for additional information
  lastDetectedAt DateTime    @default(now())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  integration    Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  appFinding     AppFinding  @relation(fields: [appFindingId], references: [id], onDelete: Cascade)

  @@index([integrationId])
  @@index([appFindingId])
  @@map("integration_finding_details")
}

model BackgroundJob {
  id        String    @id @default(uuid())
  name      String // Name of the job
  status    String // 'running', 'completed', 'failed'
  startTime DateTime  @default(now())
  endTime   DateTime?
  error     String? // Error message if job failed
  metadata  String? // JSON data for additional information
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name])
  @@index([status])
  @@map("background_jobs")
}

model Webhook {
  id          String         @id @default(uuid())
  name        String // Name of the webhook
  description String? // Description of the webhook
  token       String         @unique // Secret token for authentication
  isEnabled   Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  flows       Flow[]         @relation("WebhookToFlow") // Flows triggered by this webhook
  events      WebhookEvent[]

  @@map("webhooks")
}

model WebhookEvent {
  id        String    @id @default(uuid())
  webhookId String
  payload   String // JSON payload of the event
  status    String // 'pending', 'processing', 'completed', 'failed'
  error     String? // Error message if processing failed
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  webhook   Webhook   @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  flowRuns  FlowRun[]

  @@index([webhookId])
  @@index([status])
  @@map("webhook_events")
}

model Flow {
  id           String      @id @default(uuid())
  name         String // Name of the flow
  description  String? // Description of the flow
  parentFlowId String? // Parent flow for nested flows
  config       String // JSON configuration for the flow
  isEnabled    Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  webhooks     Webhook[]   @relation("WebhookToFlow")
  parentFlow   Flow?       @relation("FlowToFlow", fields: [parentFlowId], references: [id], onDelete: SetNull)
  childFlows   Flow[]      @relation("FlowToFlow")
  flowRuns     FlowRun[]
  queueItems   QueueItem[]

  @@index([parentFlowId])
  @@map("flows")
}

model FlowRun {
  id             String        @id @default(uuid())
  flowId         String
  webhookEventId String?
  status         String // 'pending', 'processing', 'completed', 'failed'
  input          String // JSON input data
  output         String? // JSON output data
  error          String? // Error message if run failed
  startTime      DateTime      @default(now())
  endTime        DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  flow           Flow          @relation(fields: [flowId], references: [id], onDelete: Cascade)
  webhookEvent   WebhookEvent? @relation(fields: [webhookEventId], references: [id], onDelete: SetNull)
  queueItems     QueueItem[]

  @@index([flowId])
  @@index([status])
  @@map("flow_runs")
}

model Queue {
  id          String      @id @default(uuid())
  name        String      @unique // Name of the queue
  description String? // Description of the queue
  isEnabled   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       QueueItem[]

  @@map("queues")
}

model QueueItem {
  id        String   @id @default(uuid())
  queueId   String
  flowId    String
  flowRunId String?
  status    String // 'pending', 'processing', 'completed', 'failed'
  payload   String // JSON payload
  error     String? // Error message if processing failed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  queue     Queue    @relation(fields: [queueId], references: [id], onDelete: Cascade)
  flow      Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)
  flowRun   FlowRun? @relation(fields: [flowRunId], references: [id], onDelete: SetNull)

  @@index([queueId])
  @@index([flowId])
  @@index([status])
  @@map("queue_items")
}
